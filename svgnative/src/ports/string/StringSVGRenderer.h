```cpp
#ifndef STRING_SVG_RENDERER_H
#define STRING_SVG_RENDERER_H
#include "svgnative/ports/string/StringSVGRenderer.h"
#include<cmath>
#define M_PI 3.14159265358979323846
namespace SVGNative{StringSVGPath::StringSVGPath(){mStringStream.precision(3);}void StringSVGPath::Rect(float x,float y,float width,float height){mStringStream<<" Rect("<<x<<','<<y<<','<<width<<','<<height<<')';}void StringSVGPath::RoundedRect(float x,float y,float width,float height,float rx,float ry){mStringStream<<" RoundedRect("<<x<<','<<y<<','<<width<<','<<height<<','<<rx<<','<<ry<<')';}void StringSVGPath::Ellipse(float cx,float cy,float rx,float ry){mStringStream<<" Ellipse("<<cx<<','<<cy<<','<<rx<<','<<ry<<')';}void StringSVGPath::MoveTo(float x,float y){mStringStream<<" M"<<x<<','<<y;}void StringSVGPath::LineTo(float x,float y){mStringStream<<" L"<<x<<','<<y;}void StringSVGPath::CurveTo(float x1,float y1,float x2,float y2,float x3,float y3){mStringStream<<" C"<<x1<<','<<y1<<','<<x2<<','<<y2<<','<<x3<<','<<y3;}void StringSVGPath::CurveToV(float x2,float y2,float x3,float y3){mStringStream<<" Q"<<x2<<','<<y2<<','<<x3<<','<<y3;}void StringSVGPath::ClosePath(){mStringStream<<" Z";}std::string StringSVGPath::String()const{return mStringStream.str();}float deg2rad(float angle);float deg2rad(float angle){return static_cast<float>(M_PI/180.0*angle);}StringSVGTransform::StringSVGTransform(float a,float b,float c,float d,float tx,float ty){Set(a,b,c,d,tx,ty);}void StringSVGTransform::Set(float a,float b,float c,float d,float tx,float ty){mTransform={a,b,c,d,tx,ty};}void StringSVGTransform::Rotate(float r){r=deg2rad(r);float cosAngle=cos(r);float sinAngle=sin(r);auto rot=AffineTransform{cosAngle,sinAngle,-sinAngle,cosAngle,0,0};Multiply(rot);}void StringSVGTransform::Translate(float tx,float ty){mTransform.e+=tx*mTransform.a+ty*mTransform.c;mTransform.f+=tx*mTransform.b+ty*mTransform.d;}void StringSVGTransform::Scale(float sx,float sy){mTransform.a*=sx;mTransform.b*=sx;mTransform.c*=sy;mTransform.d*=sy;}void StringSVGTransform::Concat(float a,float b,float c,float d,float tx,float ty){AffineTransform other{a,b,c,d,tx,ty};Multiply(other);}std::string StringSVGTransform::String()const{std::ostringstream stringStream;stringStream.precision(3);stringStream<<"matrix("<<mTransform.a<<','<<mTransform.b<<','<<mTransform.c<<','<<mTransform.d<<','<<mTransform.e<<','<<mTransform.f<<')';return stringStream.str();}void StringSVGTransform::Multiply(const AffineTransform&o){AffineTransform newT;newT.a=o.a*mTransform.a+o.b*mTransform.c;newT.b=o.a*mTransform.b+o.b*mTransform.d;newT.c=o.c*mTransform.a+o.d*mTransform.c;newT.d=o.c*mTransform.b+o.d*mTransform.d;newT.e=o.e*mTransform.a+o.f*mTransform.c+mTransform.e;newT.f=o.e*mTransform.b+o.f*mTransform.d+mTransform.f;mTransform=newT;